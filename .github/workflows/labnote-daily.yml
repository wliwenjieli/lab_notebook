name: Daily Lab Notebook

on:
  schedule:
    - cron: "0 0 * * *"   # 00:00 UTC daily ‚âà 8pm ET during DST, 7pm ET during Standard Time
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write

env:
  TZ_DB: America/New_York
  REPO_NAME: lab_notebook

jobs:
  daily:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.LABNOTEBOOK_TOKEN }}

      - name: Compute local dates
        id: dates
        shell: bash
        run: |
          export TZ="${TZ_DB}"
          TODAY="$(date +%F)"
          YDAY="$(date -d 'yesterday' +%F)"
          echo "today=$TODAY" >> "$GITHUB_OUTPUT"
          echo "yday=$YDAY"   >> "$GITHUB_OUTPUT"

      - name: Ensure base folders exist
        run: |
          mkdir -p theory experiments

      # ---------- 1) PROMPT FOR TODAY ----------
      - name: Open or update today's prompt issue
        uses: actions/github-script@v7
        env:
          TODAY: ${{ steps.dates.outputs.today }}
          TZ_DB: ${{ env.TZ_DB }}
        with:
          github-token: ${{ secrets.LABNOTEBOOK_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const today = process.env.TODAY;
            const tz    = process.env.TZ_DB;
            const title = `Daily labnote prompt ‚Äî ${today}`;

            // search for existing issue
            const search = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue in:title "${title}"`
            });

            if (search.data.items.length > 0) {
              const number = search.data.items[0].number;
              await github.rest.issues.update({ owner, repo, issue_number: number, state: "open" });
              await github.rest.issues.createComment({
                owner, repo, issue_number: number,
                body: [
                  `üëã ${today} 8pm (${tz}) check-in.`,
                  `Reply here with your theory/experiment notes, or commit files to the repo:`,
                  "",
                  `- theory/${today}-theory.md`,
                  `- experiments/${today}-experiments.md`
                ].join("\n")
              });
            } else {
              await github.rest.issues.create({
                owner, repo, title,
                body: [
                  `üïó Daily prompt for **${today}** (timezone: ${tz}).`,
                  "",
                  "Please add your notes by replying here, or commit files to:",
                  "- `theory/` ‚Üí Theory Notes",
                  "- `experiments/` ‚Üí Experiment Log",
                  "",
                  "If there is no reply by **tomorrow 8pm**, I will auto-create entries marked **AUTO-GENERATED** using recent repo activity."
                ].join("\n")
              });
            }

      # ---------- 2) FALLBACK FOR YESTERDAY ----------
      - name: Check yesterday's prompt issue status
        id: yday_status
        uses: actions/github-script@v7
        env:
          YDAY: ${{ steps.dates.outputs.yday }}
        with:
          github-token: ${{ secrets.LABNOTEBOOK_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const yday  = process.env.YDAY;
            const title = `Daily labnote prompt ‚Äî ${yday}`;

            const search = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue in:title "${title}"`
            });

            if (search.data.items.length === 0) {
              core.setOutput("needs_autogen", "true");
              core.setOutput("issue_number", "");
              return;
            }

            const issue   = search.data.items[0];
            const number  = issue.number;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });

            const humanComments = comments.data.filter(c => (c.user?.type || "").toLowerCase() !== "bot");
            const answered = humanComments.length > 0;
            const isClosed = issue.state === "closed";

            core.setOutput("needs_autogen", (!answered && !isClosed) ? "true" : "false");
            core.setOutput("issue_number", String(number));

      - name: Gather activity digest (commits & issues) for YDAY
        if: steps.yday_status.outputs.needs_autogen == 'true'
        id: digest
        uses: actions/github-script@v7
        env:
          YDAY:  ${{ steps.dates.outputs.yday }}
          TODAY: ${{ steps.dates.outputs.today }}
          TZ_DB: ${{ env.TZ_DB }}
        with:
          github-token: ${{ secrets.LABNOTEBOOK_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const yday  = process.env.YDAY;
            const today = process.env.TODAY;
            const tz    = process.env.TZ_DB;

            // commits in the UTC day window (approximation of 8pm‚Üí8pm window)
            const commits = await github.rest.repos.listCommits({
              owner, repo, since: `${yday}T00:00:00Z`, until: `${today}T00:00:00Z`, per_page: 50
            });
            const commitLines = commits.data.map(c =>
              `- ${String(c.commit.author?.date).slice(0,19).replace('T',' ')}Z ‚Äî ${c.commit.message.split('\n')[0]} (${c.sha.slice(0,7)})`
            );

            // issues updated since yday
            const issues = await github.rest.issues.listForRepo({
              owner, repo, state: "all", per_page: 50, since: `${yday}T00:00:00Z`
            });
            const issueLines = issues.data.map(i => `- #${i.number} ${i.title} [${i.state}]`);

            const digest = [
              `**Digest window (approx): ${yday} 20:00 ‚Üí ${today} 20:00 (${tz})**`,
              "",
              "### Repo commits",
              commitLines.length ? commitLines.join("\n") : "_None_",
              "",
              "### Issues updated",
              issueLines.length ? issueLines.join("\n") : "_None_"
            ].join("\n");

            core.setOutput("digest_md", digest);

      - name: Create AUTO-GENERATED files for YDAY
        if: steps.yday_status.outputs.needs_autogen == 'true'
        shell: bash
        run: |
          YDAY="${{ steps.dates.outputs.yday }}"
          THEORY="theory/${YDAY}-theory.md"
          EXPTS="experiments/${YDAY}-experiments.md"

          {
            echo "# üß† Theory Notes ‚Äî ${YDAY}"
            echo
            echo "> **AUTO-GENERATED** (no user response by next 8pm)."
            echo
            echo "## Concepts Developed"
            echo "- _Pending user input_"
            echo
            echo "## References & Inspirations"
            echo "- _Pending user input_"
            echo
            echo "## Open Questions"
            echo "- _Pending user input_"
            echo
            echo "## Next Directions"
            echo "- _Pending user input_"
            echo
            echo "## Activity Digest"
            echo
            printf "%s\n" "${{ steps.digest.outputs.digest_md }}"
            echo
            echo "## üè∑ Tags"
            echo "#theory #auto-generated"
          } > "$THEORY"

          {
            echo "# üß™ Experiment Log ‚Äî ${YDAY}"
            echo
            echo "> **AUTO-GENERATED** (no user response by next 8pm)."
            echo
            echo "## Goals"
            echo "- _Pending user input_"
            echo
            echo "## Setup"
            echo "- _Pending user input_"
            echo
            echo "## Procedure"
            echo "- _Pending user input_"
            echo
            echo "## Observations & Results"
            echo "- _Pending user input_"
            echo
            echo "## Analysis"
            echo "- _Pending user input_"
            echo
            echo "## Next Steps"
            echo "- _Pending user input_"
            echo
            echo "## Activity Digest"
            echo
            printf "%s\n" "${{ steps.digest.outputs.digest_md }}"
            echo
            echo "## üè∑ Tags"
            echo "#experiment #auto-generated"
          } > "$EXPTS"

      - name: Commit & push (if anything changed)
        shell: bash
        run: |
          git config user.name  "labnote-bot"
          git config user.email "labnote-bot@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "Nothing to commit."
          else
            git commit -m "Daily workflow: prompt for ${{ steps.dates.outputs.today }}; fallback/autogen for ${{ steps.dates.outputs.yday }}"
            git push
          fi

      - name: Comment on yesterday's issue (if auto-generated)
        if: steps.yday_status.outputs.needs_autogen == 'true' && steps.yday_status.outputs.issue_number != ''
        uses: actions/github-script@v7
        env:
          YDAY: ${{ steps.dates.outputs.yday }}
          ISSUE_NUMBER: ${{ steps.yday_status.outputs.issue_number }}
        with:
          github-token: ${{ secrets.LABNOTEBOOK_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const issue_number = Number(process.env.ISSUE_NUMBER);
            const yday = process.env.YDAY;

            await github.rest.issues.createComment({
              owner, repo, issue_number,
              body: [
                "‚è± No response by the next 8pm. Created **AUTO-GENERATED** entries:",
                `- \`theory/${yday}-theory.md\``,
                `- \`experiments/${yday}-experiments.md\``,
                "",
                "You can edit those files directly in a follow-up commit."
              ].join("\n")
            });
